package cmd

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"

	client "github.com/semaphoreci/cli/api/client"
	"github.com/semaphoreci/cli/cmd/utils"
	"github.com/semaphoreci/cli/config"
	"github.com/spf13/cobra"
)

type Event struct {
	Timestamp int32  `json:"timestamp"`
	Type      string `json:"event"`
	Output    string `json:"output"`
	Directive string `json:"directive"`
	ExitCode  int32  `json:"exit_code"`
	JobResult string `json:"job_result"`
}

type Events struct {
	Events []Event `json:"events"`
}

var logsCmd = &cobra.Command{
	Use:   "logs [JOB ID]",
	Short: "Display logs generated by a job.",
	Long:  ``,
	Args:  cobra.ExactArgs(1),

	Run: func(cmd *cobra.Command, args []string) {
		id := args[0]

		c := client.NewJobsV1AlphaApi()
		job, err := c.GetJob(id)

		utils.Check(err)

		url := fmt.Sprintf("https://%s/jobs/%s/raw_logs.json", config.GetHost(), job.Metadata.Id)

		req, err := http.NewRequest("GET", url, nil)

		req.Header.Set("Content-Type", "application/json")
		req.Header.Set("Authorization", fmt.Sprintf("Token %s", config.GetAuth()))

		client := &http.Client{}
		resp, err := client.Do(req)

		utils.Check(err)

		defer resp.Body.Close()

		body, err := ioutil.ReadAll(resp.Body)

		events := Events{}
		err = json.Unmarshal(body, &events)
		utils.Check(err)

		for _, e := range events.Events {
			if e.Type == "cmd_output" {
				fmt.Println(e.Output)
			}

			if e.Type == "cmd_started" {
				fmt.Printf("\n\x1b[33mâœ» %s\x1b[0m\n", e.Directive)
			}

			if e.Type == "cmd_finished" {
				fmt.Printf("\x1b[33mexit status: %d\x1b[0m\n", e.ExitCode)
			}

			if e.Type == "job_finished" {
				if e.JobResult == "passed" {
					fmt.Printf("\n\n\x1b[32mJob %s.\x1b[0m\n", e.JobResult)
				}

				if e.JobResult == "failed" {
					fmt.Printf("\n\n\x1b[31mJob %s.\x1b[0m\n", e.JobResult)
				}
			}
		}
	},
}

func init() {
	RootCmd.AddCommand(logsCmd)
}
